{"ast":null,"code":"import React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from '../../_virtual/index.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport { usePopper } from '../../hooks/usePopper.js';\nimport isRTL from '../../utils/isRTL.js';\nvar CPicker = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    _b = _a.container,\n    container = _b === void 0 ? 'dropdown' : _b,\n    disabled = _a.disabled,\n    dropdownClassNames = _a.dropdownClassNames,\n    footer = _a.footer,\n    footerContent = _a.footerContent,\n    onHide = _a.onHide,\n    onShow = _a.onShow,\n    toggler = _a.toggler,\n    visible = _a.visible;\n  var pickerRef = useRef(null);\n  var pickerForkedRef = useForkedRef(ref, pickerRef);\n  var dropdownRef = useRef(null);\n  var togglerRef = useRef(null);\n  var _c = usePopper(),\n    initPopper = _c.initPopper,\n    destroyPopper = _c.destroyPopper;\n  var _d = useState(visible),\n    _visible = _d[0],\n    setVisible = _d[1];\n  var popperConfig = {\n    placement: isRTL(pickerRef.current) ? 'bottom-end' : 'bottom-start',\n    modifiers: [{\n      name: 'preventOverflow',\n      options: {\n        boundary: 'clippingParents'\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 2]\n      }\n    }]\n  };\n  useEffect(function () {\n    setVisible(visible);\n  }, [visible]);\n  useEffect(function () {\n    if (container !== 'inline' && _visible) {\n      onShow && onShow();\n      window.addEventListener('mouseup', handleMouseUp);\n      window.addEventListener('keyup', handleKeyUp);\n      togglerRef.current && dropdownRef.current && initPopper(togglerRef.current, dropdownRef.current, popperConfig);\n    }\n    return function () {\n      onHide && onHide();\n      window.removeEventListener('mouseup', handleMouseUp);\n      window.removeEventListener('keyup', handleKeyUp);\n      destroyPopper();\n    };\n  }, [_visible]);\n  var handleKeyUp = function (event) {\n    if (event.key === 'Escape') {\n      setVisible(false);\n    }\n  };\n  var handleMouseUp = function (event) {\n    if (pickerRef.current && pickerRef.current.contains(event.target)) {\n      return;\n    }\n    setVisible(false);\n  };\n  switch (container) {\n    case 'inline':\n      {\n        return React.createElement(\"div\", {\n          className: classNames('picker', className),\n          ref: pickerForkedRef\n        }, children);\n      }\n    default:\n      {\n        return React.createElement(\"div\", {\n          className: classNames(className, {\n            show: _visible\n          }),\n          onClick: function () {\n            return !disabled && setVisible(true);\n          },\n          ref: pickerForkedRef\n        }, toggler && React.isValidElement(toggler) && React.cloneElement(toggler, {\n          ref: togglerRef\n        }), React.createElement(\"div\", {\n          className: dropdownClassNames,\n          ref: dropdownRef\n        }, children, footer && footerContent));\n      }\n  }\n});\nCPicker.displayName = 'CPicker';\nCPicker.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.oneOf(['dropdown', 'inline']),\n  disabled: PropTypes.bool,\n  dropdownClassNames: PropTypes.string,\n  footer: PropTypes.bool,\n  footerContent: PropTypes.node,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  toggler: PropTypes.node,\n  visible: PropTypes.bool\n};\nexport { CPicker };","map":{"version":3,"names":["CPicker","forwardRef","_a","ref","children","className","_b","container","disabled","dropdownClassNames","footer","footerContent","onHide","onShow","toggler","visible","pickerRef","useRef","pickerForkedRef","useForkedRef","dropdownRef","togglerRef","_c","usePopper","initPopper","destroyPopper","_d","useState","_visible","setVisible","popperConfig","placement","isRTL","current","modifiers","name","options","boundary","offset","useEffect","window","addEventListener","handleMouseUp","handleKeyUp","removeEventListener","event","key","contains","target","React","createElement","classNames","show","onClick","isValidElement","cloneElement","displayName","propTypes","PropTypes","node","string","oneOf","bool","func"],"sources":["C:\\Users\\5m\\node_modules\\@coreui\\react-pro\\src\\components\\picker\\CPicker.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes, ReactNode, useEffect, useRef, useState } from 'react'\n\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\nimport { Placement } from '@popperjs/core'\n\nimport { useForkedRef, usePopper } from '../../hooks'\nimport { isRTL } from '../../utils'\n\nexport interface CPickerProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * Set container type for the component.\n   */\n  container?: 'dropdown' | 'inline'\n  /**\n   * Toggle the disabled state for the component.\n   */\n  disabled?: boolean\n  /**\n   * A string of all className you want applied to the dropdown menu.\n   */\n  dropdownClassNames?: string\n  /**\n   * Toggle visibility of footer element.\n   */\n  footer?: boolean\n  /**\n   * Add custom elements to the footer.\n   */\n  footerContent?: ReactNode\n  /**\n   * Callback fired when the component requests to be hidden.\n   */\n  onHide?: () => void\n  /**\n   * Callback fired when the component requests to be shown.\n   */\n  onShow?: () => void\n  /**\n   * The content of toggler.\n   */\n  toggler?: ReactNode\n  /**\n   * Toggle the visibility of dropdown menu component.\n   */\n  visible?: boolean\n}\n\nexport const CPicker = forwardRef<HTMLDivElement | HTMLLIElement, CPickerProps>(\n  (\n    {\n      children,\n      className,\n      container = 'dropdown',\n      disabled,\n      dropdownClassNames,\n      footer,\n      footerContent,\n      onHide,\n      onShow,\n      toggler,\n      visible,\n    },\n    ref,\n  ) => {\n    const pickerRef = useRef<HTMLDivElement>(null)\n    const pickerForkedRef = useForkedRef(ref, pickerRef)\n    const dropdownRef = useRef<HTMLDivElement>(null)\n    const togglerRef = useRef<HTMLDivElement>(null)\n\n    const { initPopper, destroyPopper } = usePopper()\n\n    const [_visible, setVisible] = useState(visible)\n\n    const popperConfig = {\n      placement: (isRTL(pickerRef.current) ? 'bottom-end' : 'bottom-start') as Placement,\n      modifiers: [\n        {\n          name: 'preventOverflow',\n          options: {\n            boundary: 'clippingParents',\n          },\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: [0, 2],\n          },\n        },\n      ],\n    }\n\n    useEffect(() => {\n      setVisible(visible)\n    }, [visible])\n\n    useEffect(() => {\n      if (container !== 'inline' && _visible) {\n        onShow && onShow()\n\n        window.addEventListener('mouseup', handleMouseUp)\n        window.addEventListener('keyup', handleKeyUp)\n\n        togglerRef.current &&\n          dropdownRef.current &&\n          initPopper(togglerRef.current, dropdownRef.current, popperConfig)\n      }\n\n      return () => {\n        onHide && onHide()\n\n        window.removeEventListener('mouseup', handleMouseUp)\n        window.removeEventListener('keyup', handleKeyUp)\n\n        destroyPopper()\n      }\n    }, [_visible])\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        setVisible(false)\n      }\n    }\n\n    const handleMouseUp = (event: Event) => {\n      if (pickerRef.current && pickerRef.current.contains(event.target as HTMLElement)) {\n        return\n      }\n\n      setVisible(false)\n    }\n\n    switch (container) {\n      case 'inline': {\n        return (\n          <div className={classNames('picker', className)} ref={pickerForkedRef}>\n            {children}\n          </div>\n        )\n      }\n      default: {\n        return (\n          <div\n            className={classNames(className, {\n              show: _visible,\n            })}\n            onClick={() => !disabled && setVisible(true)}\n            ref={pickerForkedRef}\n          >\n            {toggler &&\n              React.isValidElement(toggler) &&\n              React.cloneElement(toggler as React.ReactElement<any>, {\n                ref: togglerRef,\n              })}\n            <div className={dropdownClassNames} ref={dropdownRef}>\n              {children}\n              {footer && footerContent}\n            </div>\n          </div>\n        )\n      }\n    }\n  },\n)\n\nCPicker.displayName = 'CPicker'\n\nCPicker.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  container: PropTypes.oneOf(['dropdown', 'inline']),\n  disabled: PropTypes.bool,\n  dropdownClassNames: PropTypes.string,\n  footer: PropTypes.bool,\n  footerContent: PropTypes.node,\n  onHide: PropTypes.func,\n  onShow: PropTypes.func,\n  toggler: PropTypes.node,\n  visible: PropTypes.bool,\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}