{"ast":null,"code":"import { __rest, __assign } from '../../packages/coreui-react-pro/node_modules/tslib/tslib.es6.js';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef, useRef, useState, useEffect } from 'react';\nimport classNames from '../../_virtual/index.js';\nimport { useForkedRef } from '../../hooks/useForkedRef.js';\nimport '@popperjs/core';\nimport { CSpinner } from '../spinner/CSpinner.js';\nvar CElementCover = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    className = _a.className,\n    boundaries = _a.boundaries,\n    _b = _a.opacity,\n    opacity = _b === void 0 ? 0.4 : _b,\n    rest = __rest(_a, [\"children\", \"className\", \"boundaries\", \"opacity\"]);\n  var elementCoverRef = useRef(null);\n  var forkedRef = useForkedRef(ref, elementCoverRef);\n  var _c = useState({}),\n    customBoundaries = _c[0],\n    setCustomBoundaries = _c[1];\n  var getCustomBoundaries = function () {\n    if (!elementCoverRef || !elementCoverRef.current || !boundaries) {\n      return {};\n    }\n    var parent = elementCoverRef.current.parentElement;\n    if (!parent) {\n      return {};\n    }\n    var parentCoords = parent.getBoundingClientRect();\n    var customBoundaries = {};\n    boundaries.forEach(function (_a) {\n      var sides = _a.sides,\n        query = _a.query;\n      var element = parent.querySelector(query);\n      if (!element || !sides) {\n        return;\n      }\n      var coords = element.getBoundingClientRect();\n      sides.forEach(function (side) {\n        var sideMargin = Math.abs(coords[side] - parentCoords[side]);\n        customBoundaries[side] = \"\".concat(sideMargin, \"px\");\n      });\n    });\n    return customBoundaries;\n  };\n  useEffect(function () {\n    setCustomBoundaries(getCustomBoundaries());\n  }, [JSON.stringify(getCustomBoundaries())]);\n  var classes = classNames(className);\n  var containerCoords = __assign({\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }, customBoundaries);\n  var coverStyles = __assign(__assign({}, containerCoords), {\n    position: 'absolute',\n    zIndex: 2,\n    backgroundColor: \"rgba(255,255,255,\".concat(opacity, \")\")\n  });\n  return React.createElement(\"div\", __assign({\n    className: classes,\n    style: coverStyles\n  }, rest, {\n    ref: forkedRef\n  }), React.createElement(\"div\", {\n    style: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translateX(-50%) translateY(-50%)'\n    }\n  }, children || React.createElement(CSpinner, {\n    variant: \"grow\",\n    color: \"primary\"\n  })));\n});\nCElementCover.propTypes = {\n  boundaries: PropTypes.array,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  opacity: PropTypes.number\n};\nCElementCover.displayName = 'CElementCover';\nexport { CElementCover };","map":{"version":3,"names":["CElementCover","forwardRef","_a","ref","children","className","boundaries","_b","opacity","rest","__rest","elementCoverRef","useRef","forkedRef","useForkedRef","_c","useState","customBoundaries","setCustomBoundaries","getCustomBoundaries","current","parent","parentElement","parentCoords","getBoundingClientRect","forEach","sides","query","element","querySelector","coords","side","sideMargin","Math","abs","concat","useEffect","JSON","stringify","classes","classNames","containerCoords","__assign","top","left","right","bottom","coverStyles","position","zIndex","backgroundColor","React","createElement","style","transform","CSpinner","variant","color","propTypes","PropTypes","array","node","string","number","displayName"],"sources":["C:\\Users\\5m\\node_modules\\@coreui\\react-pro\\src\\components\\element-cover\\CElementCover.tsx"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React, {\n  CSSProperties,\n  forwardRef,\n  HTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport classNames from 'classnames'\n\nimport { useForkedRef } from '../../hooks'\nimport { CSpinner } from '../spinner/CSpinner'\n\ninterface CElementCoverProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * A string of all className you want applied to the base component.\n   */\n  className?: string\n  /**\n   * Array of custom boundaries. Use to create custom cover area (instead of parent element area). Area is defined by four sides: 'top', 'bottom', 'right', 'left'. If side is not defined by any custom boundary it is equal to parent element boundary. Each custom boundary is object with keys:\n   * - sides (array) - select boundaries of element to define boundaries. Sides names: 'top', 'bottom', 'right', 'left'.\n   * - query (string) - query used to get element which define boundaries. Search will be done only inside parent element, by parent.querySelector(query) function.\n   */\n  boundaries?: { sides: string[]; query: string }[]\n  /**\n   * Opacity of the cover.\n   */\n  opacity?: number\n}\nexport const CElementCover = forwardRef<HTMLDivElement, CElementCoverProps>(\n  ({ children, className, boundaries, opacity = 0.4, ...rest }, ref) => {\n    const elementCoverRef = useRef<HTMLDivElement>(null)\n    const forkedRef = useForkedRef(ref, elementCoverRef)\n    const [customBoundaries, setCustomBoundaries] = useState({})\n\n    const getCustomBoundaries = () => {\n      if (!elementCoverRef || !elementCoverRef.current || !boundaries) {\n        return {}\n      }\n\n      const parent = elementCoverRef.current.parentElement\n      if (!parent) {\n        return {}\n      }\n\n      const parentCoords: {[key: string]: any} = parent.getBoundingClientRect()\n      const customBoundaries: {[key: string]: string} = {}\n      boundaries.forEach(({ sides, query }) => {\n        const element = parent.querySelector(query)\n        if (!element || !sides) {\n          return\n        }\n\n        const coords: {[key: string]: any} = element.getBoundingClientRect()\n        sides.forEach((side) => {\n          const sideMargin = Math.abs(coords[side] - parentCoords[side])\n          customBoundaries[side] = `${sideMargin}px`\n        })\n      })\n      return customBoundaries\n    }\n\n    useEffect(() => {\n      setCustomBoundaries(getCustomBoundaries())\n    }, [JSON.stringify(getCustomBoundaries())])\n\n    const classes = classNames(className)\n\n    const containerCoords = {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      ...customBoundaries,\n    }\n\n    const coverStyles: CSSProperties = {\n      ...containerCoords,\n      position: 'absolute',\n      zIndex: 2,\n      backgroundColor: `rgba(255,255,255,${opacity})`,\n    }\n\n    return (\n      <div className={classes} style={coverStyles} {...rest} ref={forkedRef}>\n        <div\n          style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translateX(-50%) translateY(-50%)',\n          }}\n        >\n          {children || <CSpinner variant=\"grow\" color=\"primary\" />}\n        </div>\n      </div>\n    )\n  },\n)\n\nCElementCover.propTypes = {\n  boundaries: PropTypes.array,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  opacity: PropTypes.number,\n}\n\nCElementCover.displayName = 'CElementCover'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}