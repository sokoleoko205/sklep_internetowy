{"ast":null,"code":"import { __rest, __assign } from '../../packages/coreui-react-pro/node_modules/tslib/tslib.es6.js';\nimport React, { forwardRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { CTableBody } from '../table/CTableBody.js';\nimport '../form/CForm.js';\nimport { CFormCheck } from '../form/CFormCheck.js';\nimport '../form/CFormControlValidation.js';\nimport '../form/CFormControlWrapper.js';\nimport '../form/CFormFeedback.js';\nimport '../form/CFormFloating.js';\nimport '../form/CFormInput.js';\nimport '../form/CFormLabel.js';\nimport '../form/CFormRange.js';\nimport '../form/CFormSelect.js';\nimport '../form/CFormSwitch.js';\nimport '../form/CFormText.js';\nimport '../form/CFormTextarea.js';\nimport '../form/CInputGroup.js';\nimport '../form/CInputGroupText.js';\nimport '../table/CTable.js';\nimport '../table/CTableCaption.js';\nimport { CTableDataCell } from '../table/CTableDataCell.js';\nimport '../table/CTableFoot.js';\nimport '../table/CTableHead.js';\nimport '../table/CTableHeaderCell.js';\nimport { CTableRow } from '../table/CTableRow.js';\nimport isObjectInArray from '../../utils/isObjectInArray.js';\nimport { ITEM_INTERNAL_KEYS } from './consts.js';\nimport { getColumns, getClickedColumnName, getColumnName, getTableDataCellProps, getTableDataCellStyles } from './utils.js';\nvar CSmartTableBody = forwardRef(function (_a, ref) {\n  var clickableRows = _a.clickableRows,\n    columnNames = _a.columnNames,\n    columns = _a.columns,\n    currentItems = _a.currentItems,\n    firstItemOnActivePageIndex = _a.firstItemOnActivePageIndex,\n    noItemsLabel = _a.noItemsLabel,\n    onRowChecked = _a.onRowChecked,\n    onRowClick = _a.onRowClick,\n    scopedColumns = _a.scopedColumns,\n    selectable = _a.selectable,\n    selected = _a.selected,\n    rest = __rest(_a, [\"clickableRows\", \"columnNames\", \"columns\", \"currentItems\", \"firstItemOnActivePageIndex\", \"noItemsLabel\", \"onRowChecked\", \"onRowClick\", \"scopedColumns\", \"selectable\", \"selected\"]);\n  var colspan = selectable ? columns.length + 1 : columns.length;\n  var _columns = useMemo(function () {\n    return getColumns(columns);\n  }, [columns]);\n  return React.createElement(CTableBody, __assign({}, clickableRows && {\n    style: {\n      cursor: 'pointer'\n    }\n  }, rest, {\n    ref: ref\n  }), currentItems.length > 0 ? currentItems.map(function (item, trIndex) {\n    return React.createElement(React.Fragment, {\n      key: trIndex\n    }, React.createElement(CTableRow, __assign({}, item._props && __assign({}, item._props), clickableRows && {\n      tabIndex: 0\n    }, {\n      onClick: function (event) {\n        return onRowClick && onRowClick(item, trIndex + firstItemOnActivePageIndex, getClickedColumnName(event.target, columnNames, selectable), event);\n      }\n    }), selectable && React.createElement(CTableDataCell, null, React.createElement(CFormCheck, {\n      checked: selected && isObjectInArray(selected, item, ITEM_INTERNAL_KEYS),\n      disabled: item._selectable === false,\n      onChange: function (event) {\n        var _item = __assign({}, item);\n        for (var _i = 0, ITEM_INTERNAL_KEYS_1 = ITEM_INTERNAL_KEYS; _i < ITEM_INTERNAL_KEYS_1.length; _i++) {\n          var key = ITEM_INTERNAL_KEYS_1[_i];\n          delete _item[key];\n        }\n        onRowChecked && onRowChecked(_item, event.target.checked);\n      }\n    })), _columns.map(function (column, index) {\n      var colName = getColumnName(column);\n      return scopedColumns && scopedColumns[colName] && React.cloneElement(scopedColumns[colName](item, trIndex + firstItemOnActivePageIndex), {\n        key: index\n      }) || item[colName] !== undefined && React.createElement(CTableDataCell, __assign({}, getTableDataCellProps(column, item, colName), {\n        style: getTableDataCellStyles(column, item, colName),\n        key: index\n      }), item[colName]);\n    })), scopedColumns && scopedColumns.details && React.createElement(React.Fragment, null, React.createElement(CTableRow, null, React.createElement(CTableDataCell, {\n      colSpan: colspan,\n      className: \"p-0\",\n      style: {\n        borderBottomWidth: 0\n      },\n      tabIndex: -1\n    })), React.createElement(CTableRow, {\n      className: \"p-0\",\n      key: \"details\".concat(trIndex)\n    }, React.createElement(CTableDataCell, {\n      colSpan: colspan,\n      className: \"p-0\",\n      style: {\n        border: 0\n      }\n    }, scopedColumns.details(item, trIndex + firstItemOnActivePageIndex)))));\n  }) : React.createElement(CTableRow, null, React.createElement(CTableDataCell, {\n    colSpan: colspan\n  }, noItemsLabel)));\n});\nCSmartTableBody.propTypes = {\n  clickableRows: PropTypes.bool,\n  columns: PropTypes.array.isRequired,\n  currentItems: PropTypes.array.isRequired,\n  firstItemOnActivePageIndex: PropTypes.number.isRequired,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onRowChecked: PropTypes.func,\n  onRowClick: PropTypes.func,\n  columnNames: PropTypes.array.isRequired,\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n  selected: PropTypes.array\n};\nCSmartTableBody.displayName = 'CSmartTableBody';\nexport { CSmartTableBody };","map":{"version":3,"names":["CSmartTableBody","forwardRef","_a","ref","clickableRows","columnNames","columns","currentItems","firstItemOnActivePageIndex","noItemsLabel","onRowChecked","onRowClick","scopedColumns","selectable","selected","rest","__rest","colspan","length","_columns","useMemo","getColumns","React","createElement","CTableBody","__assign","style","cursor","map","item","trIndex","Fragment","key","CTableRow","_props","tabIndex","onClick","event","getClickedColumnName","target","CTableDataCell","CFormCheck","checked","isObjectInArray","ITEM_INTERNAL_KEYS","disabled","_selectable","onChange","_item","_i","ITEM_INTERNAL_KEYS_1","column","index","colName","getColumnName","cloneElement","undefined","getTableDataCellProps","getTableDataCellStyles","details","colSpan","className","borderBottomWidth","concat","border","propTypes","PropTypes","bool","array","isRequired","number","oneOfType","string","node","func","object","displayName"],"sources":["C:\\Users\\5m\\node_modules\\@coreui\\react-pro\\src\\components\\smart-table\\CSmartTableBody.tsx"],"sourcesContent":["import React, { forwardRef, MouseEvent, ReactNode, useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { CTableBody, CTableBodyProps } from '../table/CTableBody'\nimport { CFormCheck } from '../form'\nimport { CTableDataCell, CTableRow } from '../table'\n\nimport { isObjectInArray } from '../../utils'\n\nimport { ITEM_INTERNAL_KEYS } from './consts'\nimport type { Column, Item, ScopedColumns } from './types'\nimport {\n  getClickedColumnName,\n  getColumnName,\n  getColumns,\n  getTableDataCellProps,\n  getTableDataCellStyles,\n} from './utils'\n\nexport interface CSmartTableBodyProps extends CTableBodyProps {\n  clickableRows?: boolean\n  columnNames: string[]\n  columns: (Column | string)[]\n  currentItems: Item[]\n  firstItemOnActivePageIndex: number\n  noItemsLabel?: string | ReactNode\n  onRowChecked?: (item: Item, value: boolean) => void\n  onRowClick?: (item: Item, index: number, columnName: string, event: MouseEvent | boolean) => void\n  scopedColumns?: ScopedColumns\n  selectable?: boolean\n  selected?: Item[]\n}\n\nexport const CSmartTableBody = forwardRef<HTMLTableSectionElement, CSmartTableBodyProps>(\n  (\n    {\n      clickableRows,\n      columnNames,\n      columns,\n      currentItems,\n      firstItemOnActivePageIndex,\n      noItemsLabel,\n      onRowChecked,\n      onRowClick,\n      scopedColumns,\n      selectable,\n      selected,\n      ...rest\n    },\n    ref,\n  ) => {\n    const colspan: number = selectable ? columns.length + 1 : columns.length\n    const _columns = useMemo(() => getColumns(columns), [columns])\n    return (\n      <CTableBody\n        {...(clickableRows && {\n          style: { cursor: 'pointer' },\n        })}\n        {...rest}\n        ref={ref}\n      >\n        {currentItems.length > 0 ? (\n          currentItems.map((item: Item, trIndex) => {\n            return (\n              <React.Fragment key={trIndex}>\n                <CTableRow\n                  {...(item._props && { ...item._props })}\n                  {...(clickableRows && { tabIndex: 0 })}\n                  onClick={(event) =>\n                    onRowClick &&\n                    onRowClick(\n                      item,\n                      trIndex + firstItemOnActivePageIndex,\n                      getClickedColumnName(\n                        event.target as HTMLElement,\n                        columnNames,\n                        selectable,\n                      ),\n                      event,\n                    )\n                  }\n                >\n                  {selectable && (\n                    <CTableDataCell>\n                      <CFormCheck\n                        checked={\n                          selected &&\n                          isObjectInArray(selected, item, ITEM_INTERNAL_KEYS)\n                        }\n                        disabled={item._selectable === false}\n                        onChange={(event) => {\n                          const _item = { ...item }\n                          for (const key of ITEM_INTERNAL_KEYS ) {\n                            delete _item[key]\n                          }\n                          onRowChecked && onRowChecked(_item, event.target.checked)\n                        }}\n                      />\n                    </CTableDataCell>\n                  )}\n                  {_columns.map((column, index) => {\n                    const colName = getColumnName(column)\n                    return (\n                      (scopedColumns &&\n                        scopedColumns[colName] &&\n                        React.cloneElement(\n                          scopedColumns[colName](item, trIndex + firstItemOnActivePageIndex),\n                          {\n                            key: index,\n                          },\n                        )) ||\n                      (item[colName] !== undefined && (\n                        <CTableDataCell\n                          {...getTableDataCellProps(column, item, colName)}\n                          style={getTableDataCellStyles(column, item, colName)}\n                          key={index}\n                        >\n                          {item[colName]}\n                        </CTableDataCell>\n                      ))\n                    )\n                  })}\n                </CTableRow>\n                {scopedColumns && scopedColumns.details && (\n                  <>\n                    <CTableRow>\n                      <CTableDataCell\n                        colSpan={colspan}\n                        className=\"p-0\"\n                        style={{ borderBottomWidth: 0 }}\n                        tabIndex={-1}\n                      ></CTableDataCell>\n                    </CTableRow>\n                    <CTableRow className=\"p-0\" key={`details${trIndex}`}>\n                      <CTableDataCell colSpan={colspan} className=\"p-0\" style={{ border: 0 }}>\n                        {scopedColumns.details(item, trIndex + firstItemOnActivePageIndex)}\n                      </CTableDataCell>\n                    </CTableRow>\n                  </>\n                )}\n              </React.Fragment>\n            )\n          })\n        ) : (\n          <CTableRow>\n            <CTableDataCell colSpan={colspan}>{noItemsLabel}</CTableDataCell>\n          </CTableRow>\n        )}\n      </CTableBody>\n    )\n  },\n)\n\nCSmartTableBody.propTypes = {\n  clickableRows: PropTypes.bool,\n  columns: PropTypes.array.isRequired,\n  currentItems: PropTypes.array.isRequired,\n  firstItemOnActivePageIndex: PropTypes.number.isRequired,\n  noItemsLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.node]),\n  onRowChecked: PropTypes.func,\n  onRowClick: PropTypes.func,\n  columnNames: PropTypes.array.isRequired,\n  scopedColumns: PropTypes.object,\n  selectable: PropTypes.bool,\n  selected: PropTypes.array,\n}\n\nCSmartTableBody.displayName = 'CSmartTableBody'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}