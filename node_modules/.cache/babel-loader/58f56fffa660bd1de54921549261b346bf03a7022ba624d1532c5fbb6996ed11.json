{"ast":null,"code":"import { useState, useEffect } from 'react';\nvar useIsVisible = function (ref) {\n  var _a = useState(false),\n    isIntersecting = _a[0],\n    setIntersecting = _a[1];\n  useEffect(function () {\n    var observer = new IntersectionObserver(function (_a) {\n      var entry = _a[0];\n      return setIntersecting(entry.isIntersecting);\n    });\n    ref.current && observer.observe(ref.current);\n    return function () {\n      return observer.disconnect();\n    };\n  }, []);\n  return isIntersecting;\n};\nexport { useIsVisible };","map":{"version":3,"names":["useIsVisible","ref","_a","useState","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","current","observe","disconnect"],"sources":["C:\\Users\\5m\\node_modules\\@coreui\\react-pro\\src\\hooks\\useIsVisible.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from 'react'\n\nexport const useIsVisible = (ref: RefObject<HTMLElement>) => {\n  const [isIntersecting, setIntersecting] = useState(false)\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(([entry]) => setIntersecting(entry.isIntersecting))\n\n    ref.current && observer.observe(ref.current)\n    return () => observer.disconnect()\n  }, [])\n\n  return isIntersecting\n}\n"],"mappings":";AAEO,IAAMA,YAAY,GAAG,SAAAA,CAACC,GAA2B;EAChD,IAAAC,EAAA,GAAoCC,QAAQ,CAAC,KAAK,CAAC;IAAlDC,cAAc,GAAAF,EAAA;IAAEG,eAAe,GAAAH,EAAA,GAAmB;EAEzDI,SAAS,CAAC;IACR,IAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAC,UAACN,EAAO;MAAN,IAAAO,KAAK,GAAAP,EAAA;MAAM,OAAAG,eAAe,CAACI,KAAK,CAACL,cAAc,CAAC;IAArC,CAAqC,CAAC;IAE7FH,GAAG,CAACS,OAAO,IAAIH,QAAQ,CAACI,OAAO,CAACV,GAAG,CAACS,OAAO,CAAC;IAC5C,OAAO;MAAM,OAAAH,QAAQ,CAACK,UAAU,EAAE;IAAA;GACnC,EAAE,EAAE,CAAC;EAEN,OAAOR,cAAc;AACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}