{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport classNames from '../../_virtual/index.js';\nimport PropTypes from 'prop-types';\nvar CMultiSelectSelection = forwardRef(function (_a, ref) {\n  var children = _a.children,\n    disabled = _a.disabled,\n    multiple = _a.multiple,\n    placeholder = _a.placeholder,\n    onRemove = _a.onRemove,\n    search = _a.search,\n    _b = _a.selected,\n    selected = _b === void 0 ? [] : _b,\n    selectionType = _a.selectionType,\n    selectionTypeCounterText = _a.selectionTypeCounterText;\n  return React.createElement(\"span\", {\n    className: classNames('form-multi-select-selection', {\n      'form-multi-select-selection-tags': multiple && selectionType === 'tags'\n    }),\n    ref: ref\n  }, multiple && selectionType === 'counter' && !search && selected.length === 0 && placeholder, multiple && selectionType === 'counter' && !search && selected.length > 0 && \"\".concat(selected.length, \" \").concat(selectionTypeCounterText), multiple && selectionType === 'tags' && selected.map(function (option, index) {\n    if (selectionType === 'tags') {\n      return React.createElement(\"span\", {\n        className: \"form-multi-select-tag\",\n        key: index\n      }, option.label, !disabled && !option.disabled && React.createElement(\"button\", {\n        className: \"form-multi-select-tag-delete\",\n        type: \"button\",\n        \"aria-label\": \"Close\",\n        onClick: function () {\n          return onRemove && onRemove(option);\n        }\n      }));\n    }\n    return;\n  }), multiple && selectionType === 'text' && selected.map(function (option, index) {\n    return React.createElement(\"span\", {\n      key: index\n    }, option.label, index === selected.length - 1 ? '' : ',', \"\\u00A0\");\n  }), !multiple && !search && selected.map(function (option) {\n    return option.label;\n  })[0], children);\n});\nCMultiSelectSelection.propTypes = {\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  onRemove: PropTypes.func,\n  placeholder: PropTypes.string,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['external'])]),\n  selected: PropTypes.array,\n  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),\n  selectionTypeCounterText: PropTypes.string\n};\nCMultiSelectSelection.displayName = 'CMultiSelectSelection';\nexport { CMultiSelectSelection };","map":{"version":3,"names":["CMultiSelectSelection","forwardRef","_a","ref","children","disabled","multiple","placeholder","onRemove","search","_b","selected","selectionType","selectionTypeCounterText","React","createElement","className","classNames","length","concat","map","option","index","key","label","type","onClick","propTypes","PropTypes","node","bool","func","string","oneOfType","oneOf","array","displayName"],"sources":["C:\\Users\\5m\\node_modules\\@coreui\\react-pro\\src\\components\\multi-select\\CMultiSelectSelection.tsx"],"sourcesContent":["import React, { forwardRef, HTMLAttributes } from 'react'\n\nimport classNames from 'classnames'\nimport PropTypes from 'prop-types'\n\nimport type { SelectedOption } from './types'\n\nexport interface CMultiSelectSelectionProps extends HTMLAttributes<HTMLSpanElement> {\n  disabled?: boolean\n  multiple?: boolean\n  onRemove?: (option: SelectedOption) => void\n  placeholder?: string\n  search?: boolean | 'external'\n  selected?: SelectedOption[]\n  selectionType?: 'counter' | 'tags' | 'text'\n  selectionTypeCounterText?: string\n}\n\nexport const CMultiSelectSelection = forwardRef<HTMLSpanElement, CMultiSelectSelectionProps>(\n  (\n    {\n      children,\n      disabled,\n      multiple,\n      placeholder,\n      onRemove,\n      search,\n      selected = [],\n      selectionType,\n      selectionTypeCounterText,\n    },\n    ref,\n  ) => {\n    return (\n      <span\n        className={classNames('form-multi-select-selection', {\n          'form-multi-select-selection-tags': multiple && selectionType === 'tags',\n        })}\n        ref={ref}\n      >\n        {multiple && selectionType === 'counter' && !search && selected.length === 0 && placeholder}\n        {multiple &&\n          selectionType === 'counter' &&\n          !search &&\n          selected.length > 0 &&\n          `${selected.length} ${selectionTypeCounterText}`}\n        {multiple &&\n          selectionType === 'tags' &&\n          selected.map((option: SelectedOption, index: number) => {\n            if (selectionType === 'tags') {\n              return (\n                <span className=\"form-multi-select-tag\" key={index}>\n                  {option.label}\n                  {!disabled && !option.disabled && (\n                    <button\n                      className=\"form-multi-select-tag-delete\"\n                      type=\"button\"\n                      aria-label=\"Close\"\n                      onClick={() => onRemove && onRemove(option)}\n                    />\n                  )}\n                </span>\n              )\n            }\n            return\n          })}\n        {multiple &&\n          selectionType === 'text' &&\n          selected.map((option, index) => (\n            <span key={index}>\n              {option.label}\n              {index === selected.length - 1 ? '' : ','}&nbsp;\n            </span>\n          ))}\n        {!multiple && !search && selected.map((option) => option.label)[0]}\n        {children}\n      </span>\n    )\n  },\n)\n\nCMultiSelectSelection.propTypes = {\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  multiple: PropTypes.bool,\n  onRemove: PropTypes.func,\n  placeholder: PropTypes.string,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf<'external'>(['external'])]),\n  selected: PropTypes.array,\n  selectionType: PropTypes.oneOf(['counter', 'tags', 'text']),\n  selectionTypeCounterText: PropTypes.string,\n}\n\nCMultiSelectSelection.displayName = 'CMultiSelectSelection'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}